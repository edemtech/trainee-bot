const { exercises, goals, fitnessLevels } = require('../data/exercises');
const { showMainMenu } = require('./commands');

async function handleCallbackQuery(bot, callbackQuery, db) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    const user = callbackQuery.from;

    try {
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        await bot.answerCallbackQuery(callbackQuery.id);

        if (data === 'setup_profile') {
            await startProfileSetup(bot, chatId, user.id, db);
        } else if (data.startsWith('age_')) {
            await handleAgeSelection(bot, chatId, user.id, data, db);
        } else if (data.startsWith('gender_')) {
            await handleGenderSelection(bot, chatId, user.id, data, db);
        } else if (data.startsWith('level_')) {
            await handleLevelSelection(bot, chatId, user.id, data, db);
        } else if (data.startsWith('goal_')) {
            await handleGoalSelection(bot, chatId, user.id, data, db);
        } else if (data.startsWith('muscle_')) {
            await handleMuscleSelection(bot, chatId, user.id, data, db);
        } else if (data.startsWith('workout_')) {
            await handleWorkoutGeneration(bot, chatId, user.id, data, db);
        } else if (data.startsWith('save_workout_')) {
            await handleSaveWorkout(bot, chatId, user.id, data, db);
        } else if (data === 'my_workouts') {
            await showSavedWorkouts(bot, chatId, user.id, db);
        } else if (data === 'profile') {
            await showProfile(bot, chatId, user.id, db);
        } else if (data === 'main_menu') {
            await showMainMenu(bot, chatId, user.first_name);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ handleCallbackQuery:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function startProfileSetup(bot, chatId, userId, db) {
    const keyboard = {
        inline_keyboard: [
            [
                { text: "16-25", callback_data: "age_16-25" },
                { text: "26-35", callback_data: "age_26-35" }
            ],
            [
                { text: "36-45", callback_data: "age_36-45" },
                { text: "46+", callback_data: "age_46+" }
            ]
        ]
    };

    await bot.sendMessage(chatId, 
        "–ù–∞—á–Ω–µ–º —Å –≤–æ–∑—Ä–∞—Å—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:",
        { reply_markup: keyboard }
    );
}

async function handleAgeSelection(bot, chatId, userId, data, db) {
    const age = data.replace('age_', '');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —á–µ—Ä–µ–∑ Redis –∏–ª–∏ —Å–µ—Å—Å–∏–∏)
    if (!global.userProfiles) global.userProfiles = {};
    if (!global.userProfiles[userId]) global.userProfiles[userId] = {};
    global.userProfiles[userId].age = age;

    const keyboard = {
        inline_keyboard: [
            [
                { text: "üë® –ú—É–∂—Å–∫–æ–π", callback_data: "gender_male" },
                { text: "üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data: "gender_female" }
            ]
        ]
    };

    await bot.sendMessage(chatId, 
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        { reply_markup: keyboard }
    );
}

async function handleGenderSelection(bot, chatId, userId, data, db) {
    const gender = data.replace('gender_', '');
    
    if (!global.userProfiles[userId]) global.userProfiles[userId] = {};
    global.userProfiles[userId].gender = gender;

    const keyboard = {
        inline_keyboard: [
            [
                { text: "üÜï –ù–æ–≤–∏—á–æ–∫", callback_data: "level_beginner" }
            ],
            [
                { text: "üìà –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", callback_data: "level_intermediate" }
            ],
            [
                { text: "üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data: "level_advanced" }
            ]
        ]
    };

    await bot.sendMessage(chatId, 
        "–ö–∞–∫–æ–≤ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
        { reply_markup: keyboard }
    );
}

async function handleLevelSelection(bot, chatId, userId, data, db) {
    const level = data.replace('level_', '');
    
    if (!global.userProfiles[userId]) global.userProfiles[userId] = {};
    global.userProfiles[userId].fitness_level = level;

    const keyboard = {
        inline_keyboard: [
            [
                { text: "üí™ –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data: "goal_mass_gain" }
            ],
            [
                { text: "üî• –°–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞", callback_data: "goal_fat_burn" }
            ],
            [
                { text: "‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º—ã", callback_data: "goal_maintenance" }
            ]
        ]
    };

    await bot.sendMessage(chatId, 
        "–ö–∞–∫–∞—è —É –≤–∞—Å –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        { reply_markup: keyboard }
    );
}

async function handleGoalSelection(bot, chatId, userId, data, db) {
    const goal = data.replace('goal_', '');
    
    if (!global.userProfiles[userId]) global.userProfiles[userId] = {};
    global.userProfiles[userId].goals = goal;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const profile = global.userProfiles[userId];
    await db.updateUserProfile(userId, profile);

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    delete global.userProfiles[userId];

    await bot.sendMessage(chatId, 
        "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ\n\n" +
        "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const user = await db.getUser(userId);
    await showMainMenu(bot, chatId, user.first_name);
}

async function handleMuscleSelection(bot, chatId, userId, data, db) {
    const muscle = data.replace('muscle_', '');
    const muscleData = exercises[muscle];
    
    if (!muscleData) {
        await bot.sendMessage(chatId, "–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.getUser(userId);
    if (!user || !user.goals) {
        await bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.");
        return;
    }

    const keyboard = {
        inline_keyboard: [
            [
                { text: "üèãÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data: `workout_${muscle}` }
            ],
            [
                { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }
            ]
        ]
    };

    await bot.sendMessage(chatId, 
        `–í—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: *${muscleData.name}* üí™\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω–æ ${muscleData.exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n` +
        `–¶–µ–ª—å: ${goals[user.goals]}`,
        { 
            parse_mode: 'Markdown',
            reply_markup: keyboard 
        }
    );
}

async function handleWorkoutGeneration(bot, chatId, userId, data, db) {
    const muscle = data.replace('workout_', '');
    const muscleData = exercises[muscle];
    
    const user = await db.getUser(userId);
    const userGoal = user.goals;
    
    let workoutText = `üèãÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${muscleData.name}*\n`;
    workoutText += `üéØ –¶–µ–ª—å: ${goals[userGoal]}\n\n`;
    
    const workoutExercises = [];
    
    muscleData.exercises.forEach((exercise, index) => {
        const sets = exercise[userGoal];
        workoutText += `${index + 1}. *${exercise.name}*\n`;
        workoutText += `   üìù ${exercise.description}\n`;
        workoutText += `   üìä ${sets.sets} –ø–æ–¥—Ö–æ–¥–æ–≤ √ó ${sets.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n`;
        
        workoutExercises.push({
            name: exercise.name,
            description: exercise.description,
            sets: sets.sets,
            reps: sets.reps
        });
    });

    const keyboard = {
        inline_keyboard: [
            [
                { text: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data: `save_workout_${muscle}` }
            ],
            [
                { text: "üîÑ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data: `workout_${muscle}` },
                { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `muscle_${muscle}` }
            ],
            [
                { text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }
            ]
        ]
    };

    await bot.sendMessage(chatId, workoutText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (!global.currentWorkouts) global.currentWorkouts = {};
    global.currentWorkouts[userId] = {
        muscle: muscle,
        exercises: workoutExercises,
        goal: userGoal
    };
}

async function handleSaveWorkout(bot, chatId, userId, data, db) {
    const muscle = data.replace('save_workout_', '');
    
    if (!global.currentWorkouts || !global.currentWorkouts[userId]) {
        await bot.sendMessage(chatId, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
        return;
    }

    const workout = global.currentWorkouts[userId];
    const workoutName = `${exercises[muscle].name} - ${goals[workout.goal]}`;
    
    try {
        await db.saveWorkout(userId, workout, workoutName);
        await bot.sendMessage(chatId, 
            `‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${workoutName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "main_menu" }]
                    ]
                }
            }
        );
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        delete global.currentWorkouts[userId];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.");
    }
}

async function showSavedWorkouts(bot, chatId, userId, db) {
    try {
        const savedWorkouts = await db.getSavedWorkouts(userId);
        
        if (savedWorkouts.length === 0) {
            await bot.sendMessage(chatId, 
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. üìù",
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]
                        ]
                    }
                }
            );
            return;
        }

        let text = "üíæ *–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n";
        
        savedWorkouts.forEach((workout, index) => {
            const date = new Date(workout.created_at).toLocaleDateString('ru-RU');
            text += `${index + 1}. ${workout.workout_name}\n`;
            text += `   üìÖ –°–æ–∑–¥–∞–Ω–æ: ${date}\n\n`;
        });

        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', error);
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.");
    }
}

async function showProfile(bot, chatId, userId, db) {
    try {
        const user = await db.getUser(userId);
        
        if (!user) {
            await bot.sendMessage(chatId, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        let profileText = "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n";
        profileText += `üë§ –ò–º—è: ${user.first_name}\n`;
        profileText += `üìÖ –í–æ–∑—Ä–∞—Å—Ç: ${user.age || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        profileText += `üë´ –ü–æ–ª: ${user.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : user.gender === 'female' ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        profileText += `üí™ –£—Ä–æ–≤–µ–Ω—å: ${fitnessLevels[user.fitness_level] || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
        profileText += `üéØ –¶–µ–ª—å: ${goals[user.goals] || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;

        await bot.sendMessage(chatId, profileText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "setup_profile" }
                    ],
                    [
                        { text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }
                    ]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.");
    }
}

module.exports = {
    handleCallbackQuery
};
