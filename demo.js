// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –±–µ–∑ Telegram API
const Database = require('./src/database/database');
const { exercises, goals } = require('./src/data/exercises');

class BotDemo {
    constructor() {
        this.db = new Database();
        this.currentUser = null;
    }

    async simulateUserJourney() {
        console.log('üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã TraineeBot\n');

        // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.simulateRegistration();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await this.simulateProfileSetup();
        
        // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await this.simulateWorkoutSelection();
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await this.simulateSaveWorkout();

        console.log('\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        this.db.close();
    }

    async simulateRegistration() {
        console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const user = {
            telegram_id: 987654321,
            username: 'demo_user',
            first_name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };

        await this.db.createOrUpdateUser(user);
        this.currentUser = user;
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
        console.log('ü§ñ –ë–æ—Ç: –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!\n');
    }

    async simulateProfileSetup() {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...');
        
        const profile = {
            age: '26-35',
            gender: 'male',
            fitness_level: 'intermediate',
            goals: 'mass_gain'
        };

        await this.db.updateUserProfile(this.currentUser.telegram_id, profile);
        
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª:');
        console.log(`   –í–æ–∑—Ä–∞—Å—Ç: ${profile.age}`);
        console.log(`   –ü–æ–ª: –ú—É–∂—Å–∫–æ–π`);
        console.log(`   –£—Ä–æ–≤–µ–Ω—å: –°—Ä–µ–¥–Ω–∏–π`);
        console.log(`   –¶–µ–ª—å: ${goals[profile.goals]}`);
        console.log('ü§ñ –ë–æ—Ç: –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü!\n');
    }

    async simulateWorkoutSelection() {
        console.log('üèãÔ∏è –í—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...');
        
        const selectedMuscle = 'chest';
        const muscleData = exercises[selectedMuscle];
        const user = await this.db.getUser(this.currentUser.telegram_id);
        
        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: ${muscleData.name}`);
        console.log('ü§ñ –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...\n');
        
        console.log('üìã –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –¢–†–ï–ù–ò–†–û–í–ö–ê');
        console.log('=' .repeat(40));
        console.log(`üèãÔ∏è –ì—Ä—É–ø–ø–∞ –º—ã—à—Ü: ${muscleData.name}`);
        console.log(`üéØ –¶–µ–ª—å: ${goals[user.goals]}`);
        console.log('=' .repeat(40));
        
        muscleData.exercises.forEach((exercise, index) => {
            const sets = exercise[user.goals];
            console.log(`${index + 1}. ${exercise.name}`);
            console.log(`   üìù ${exercise.description}`);
            console.log(`   üìä ${sets.sets} –ø–æ–¥—Ö–æ–¥–æ–≤ √ó ${sets.reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π`);
            console.log('');
        });

        this.currentWorkout = {
            muscle: selectedMuscle,
            exercises: muscleData.exercises,
            goal: user.goals
        };
    }

    async simulateSaveWorkout() {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...');
        
        const workoutName = `${exercises[this.currentWorkout.muscle].name} - ${goals[this.currentWorkout.goal]}`;
        
        await this.db.saveWorkout(
            this.currentUser.telegram_id,
            this.currentWorkout,
            workoutName
        );
        
        console.log(`‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${workoutName}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
        console.log('ü§ñ –ë–æ—Ç: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! –£–¥–∞—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™\n');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        const savedWorkouts = await this.db.getSavedWorkouts(this.currentUser.telegram_id);
        console.log('üìö –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:');
        savedWorkouts.forEach((workout, index) => {
            const date = new Date(workout.created_at).toLocaleDateString('ru-RU');
            console.log(`   ${index + 1}. ${workout.workout_name} (${date})`);
        });
    }

    static showFeatures() {
        console.log('\nüöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò TRAINEEBOT');
        console.log('=' .repeat(50));
        console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
        console.log('‚úÖ 6 –≥—Ä—É–ø–ø –º—ã—à—Ü: –≥—Ä—É–¥—å, —Å–ø–∏–Ω–∞, –Ω–æ–≥–∏, –ø–ª–µ—á–∏, —Ä—É–∫–∏, –ø—Ä–µ—Å—Å');
        console.log('‚úÖ 3 —Ü–µ–ª–∏: –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, —Å–∂–∏–≥–∞–Ω–∏–µ –∂–∏—Ä–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º—ã');
        console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
        console.log('‚úÖ –£—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏');
        console.log('‚úÖ –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏');
        console.log('=' .repeat(50));
    }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function runDemo() {
    BotDemo.showFeatures();
    
    const demo = new BotDemo();
    await demo.simulateUserJourney();
}

if (require.main === module) {
    runDemo().catch(console.error);
}

module.exports = BotDemo;
